{
  "id": "google_workspace_tools",
  "name": "Google Workspace Tools",
  "meta": {
    "description": "This tool provides comprehensive Google Workspace functionality including Drive, Docs, Sheets, and Slides operations using OAuth 2.0 authentication. Supports file management, document creation, spreadsheet operations, and content retrieval across Google's productivity suite.",
    "manifest": {}
  },
  "content": "\"\"\"\\ntitle: Google Workspace Tools\\nauthor: rthidden\\nauthor_url: https://hiddendigitalaix.com\\ngit_url: https://github.com/rthidden/google-workspace-tools.git\\ndescription: This tool provides comprehensive Google Workspace functionality including Drive, Docs, Sheets, and Slides operations using OAuth 2.0 authentication.\\nrequired_open_webui_version: 0.6.18\\nrequirements: google-auth, google-api-python-client, google-auth-httplib2, google-auth-oauthlib, requests\\nversion: 1.0.0\\nlicence: MIT\\n\\\"\\\"\\\"\\n\\nimport json\\nimport os\\nfrom typing import List, Optional\\n\\nfrom google.auth.transport.requests import Request\\nfrom google.oauth2.credentials import Credentials\\nfrom google_auth_oauthlib.flow import InstalledAppFlow\\nfrom googleapiclient.discovery import build\\nfrom pydantic import BaseModel, Field\\n\\n\\nclass Tools:\\n    def __init__(self):\\n        \\\"\\\"\\\"Initialize the Google Workspace Tools.\\\"\\\"\\\"\\n        self.valves = self.Valves()\\n        self.citation = True\\n\\n    class Valves(BaseModel):\\n        GOOGLE_CREDENTIALS_FILE: str = Field(\\n            default=\\\"data/opt/oauth_credentials.json\\\",\\n            description=\\\"The path to the Google OAuth client credentials JSON file\\\",\\n        )\\n        TOKEN_FILE: str = Field(\\n            default=\\\"data/opt/google_token.json\\\",\\n            description=\\\"The path to store the Google API token\\\",\\n        )\\n        SCOPES: List[str] = Field(\\n            default=[\\n                \\\"https://www.googleapis.com/auth/drive\\\",\\n                \\\"https://www.googleapis.com/auth/drive.file\\\",\\n                \\\"https://www.googleapis.com/auth/documents\\\",\\n                \\\"https://www.googleapis.com/auth/spreadsheets\\\",\\n                \\\"https://www.googleapis.com/auth/presentations\\\",\\n                \\\"https://www.googleapis.com/auth/gmail.readonly\\\",\\n                \\\"https://www.googleapis.com/auth/gmail.compose\\\",\\n                \\\"https://www.googleapis.com/auth/calendar\\\",\\n                \\\"https://www.googleapis.com/auth/calendar.events\\\",\\n            ],\\n            description=\\\"Google API scopes required for Google Workspace operations\\\",\\n        )\\n\\n    def _get_google_credentials(self):\\n        \\\"\\\"\\\"Get Google credentials using OAuth 2.0 flow.\\\"\\\"\\\"\\n        creds = None\\n\\n        # Load existing token\\n        if os.path.exists(self.valves.TOKEN_FILE):\\n            try:\\n                creds = Credentials.from_authorized_user_file(\\n                    self.valves.TOKEN_FILE, self.valves.SCOPES\\n                )\\n                print(\\\"Loaded existing credentials\\\")\\n            except Exception as e:\\n                print(f\\\"Error loading credentials: {e}\\\")\\n                # Remove invalid token file\\n                os.remove(self.valves.TOKEN_FILE)\\n\\n        # If there are no valid credentials available, let the user log in\\n        if not creds or not creds.valid:\\n            if creds and creds.expired and creds.refresh_token:\\n                try:\\n                    creds.refresh(Request())\\n                    print(\\\"Refreshed expired credentials\\\")\\n                except Exception as e:\\n                    print(f\\\"Error refreshing credentials: {e}\\\")\\n                    creds = None\\n\\n            if not creds:\\n                # Run the OAuth flow\\n                if not os.path.exists(self.valves.GOOGLE_CREDENTIALS_FILE):\\n                    raise FileNotFoundError(\\n                        f\\\"Google credentials file not found: {self.valves.GOOGLE_CREDENTIALS_FILE}\\\"\\n                    )\\n\\n                flow = InstalledAppFlow.from_client_secrets_file(\\n                    self.valves.GOOGLE_CREDENTIALS_FILE, self.valves.SCOPES\\n                )\\n                # This will open a browser window for authentication\\n                creds = flow.run_local_server(port=0)\\n                print(\\\"Completed OAuth flow\\\")\\n\\n            # Save the credentials for the next run\\n            with open(self.valves.TOKEN_FILE, \\\"w\\\") as token:\\n                token.write(creds.to_json())\\n                print(f\\\"Saved credentials to {self.valves.TOKEN_FILE}\\\")\\n\\n        return creds\\n\\n    def authenticate_google_workspace(self) -> str:\\n        \\\"\\\"\\\"\\n        Authenticate with Google Workspace services. This will open a browser window for OAuth authorization.\\n        Call this function first before using any other Google Workspace tools.\\n\\n        :return: Status message indicating success or failure of authentication.\\n        \\\"\\\"\\\"\\n        try:\\n            creds = self._get_google_credentials()\\n            if creds and creds.valid:\\n                return \\\"✅ Successfully authenticated with Google Workspace! You can now use all Google Workspace tools.\\\"\\n            else:\\n                return \\\"❌ Authentication failed. Please check your credentials file and try again.\\\"\\n        except Exception as e:\\n            print(f\\\"Authentication error: {e}\\\")\\n            return f\\\"❌ Authentication error: {str(e)}\\\"\\n\\n    def list_google_drive_files(\\n        self, max_results: int = 10, folder_id: Optional[str] = None\\n    ) -> str:\\n        \\\"\\\"\\\"\\n        List files in Google Drive.\\n\\n        :param max_results: Maximum number of files to return (default: 10).\\n        :param folder_id: ID of a specific folder to list files from (optional).\\n        :return: JSON string containing the list of files.\\n        \\\"\\\"\\\"\\n        try:\\n            creds = self._get_google_credentials()\\n            service = build(\\\"drive\\\", \\\"v3\\\", credentials=creds)\\n\\n            query = \\\"\\\"\\n            if folder_id:\\n                query = f\\\"'{folder_id}' in parents\\\"\\n\\n            results = (\\n                service.files()\\n                .list(\\n                    pageSize=max_results,\\n                    q=query,\\n                    fields=\\\"nextPageToken, files(id, name, mimeType, modifiedTime, size, webViewLink)\\\",\\n                )\\n                .execute()\\n            )\\n\\n            items = results.get(\\\"files\\\", [])\\n\\n            if not items:\\n                return \\\"No files found.\\\"\\n\\n            files_data = []\\n            for item in items:\\n                files_data.append(\\n                    {\\n                        \\\"id\\\": item[\\\"id\\\"],\\n                        \\\"name\\\": item[\\\"name\\\"],\\n                        \\\"mimeType\\\": item.get(\\\"mimeType\\\", \\\"Unknown\\\"),\\n                        \\\"modifiedTime\\\": item.get(\\\"modifiedTime\\\", \\\"Unknown\\\"),\\n                        \\\"size\\\": item.get(\\\"size\\\", \\\"Unknown\\\"),\\n                        \\\"webViewLink\\\": item.get(\\\"webViewLink\\\", \\\"No link\\\"),\\n                    }\\n                )\\n\\n            return json.dumps(files_data, indent=2)\\n\\n        except Exception as e:\\n            print(f\\\"Error listing Drive files: {e}\\\")\\n            return f\\\"Error listing Drive files: {str(e)}\\\"\\n\\n    def create_google_doc(self, title: str, content: str = \\\"\\\") -> str:\\n        \\\"\\\"\\\"\\n        Create a new Google Document.\\n\\n        :param title: The title of the document.\\n        :param content: Initial content for the document (optional).\\n        :return: Document ID and view link.\\n        \\\"\\\"\\\"\\n        try:\\n            creds = self._get_google_credentials()\\n\\n            # Create the document\\n            docs_service = build(\\\"docs\\\", \\\"v1\\\", credentials=creds)\\n            doc = docs_service.documents().create(body={\\\"title\\\": title}).execute()\\n            doc_id = doc[\\\"documentId\\\"]\\n\\n            # Add content if provided\\n            if content:\\n                requests_body = [\\n                    {\\\"insertText\\\": {\\\"location\\\": {\\\"index\\\": 1}, \\\"text\\\": content}}\\n                ]\\n\\n                docs_service.documents().batchUpdate(\\n                    documentId=doc_id, body={\\\"requests\\\": requests_body}\\n                ).execute()\\n\\n            # Get the document link\\n            drive_service = build(\\\"drive\\\", \\\"v3\\\", credentials=creds)\\n            file = (\\n                drive_service.files().get(fileId=doc_id, fields=\\\"webViewLink\\\").execute()\\n            )\\n\\n            result = {\\n                \\\"documentId\\\": doc_id,\\n                \\\"title\\\": title,\\n                \\\"webViewLink\\\": file[\\\"webViewLink\\\"],\\n            }\\n\\n            return json.dumps(result, indent=2)\\n\\n        except Exception as e:\\n            print(f\\\"Error creating Google Doc: {e}\\\")\\n            return f\\\"Error creating Google Doc: {str(e)}\\\"\\n\\n    def create_google_sheet(\\n        self, title: str, data: Optional[List[List[str]]] = None\\n    ) -> str:\\n        \\\"\\\"\\\"\\n        Create a new Google Spreadsheet.\\n\\n        :param title: The title of the spreadsheet.\\n        :param data: Initial data for the spreadsheet as a list of rows (optional).\\n        :return: Spreadsheet ID and view link.\\n        \\\"\\\"\\\"\\n        try:\\n            creds = self._get_google_credentials()\\n            sheets_service = build(\\\"sheets\\\", \\\"v4\\\", credentials=creds)\\n\\n            # Create the spreadsheet\\n            spreadsheet = {\\\"properties\\\": {\\\"title\\\": title}}\\n\\n            result = sheets_service.spreadsheets().create(body=spreadsheet).execute()\\n            spreadsheet_id = result[\\\"spreadsheetId\\\"]\\n\\n            # Add data if provided\\n            if data:\\n                body = {\\\"values\\\": data}\\n                sheets_service.spreadsheets().values().update(\\n                    spreadsheetId=spreadsheet_id,\\n                    range=\\\"A1\\\",\\n                    valueInputOption=\\\"RAW\\\",\\n                    body=body,\\n                ).execute()\\n\\n            # Get the spreadsheet link\\n            drive_service = build(\\\"drive\\\", \\\"v3\\\", credentials=creds)\\n            file = (\\n                drive_service.files()\\n                .get(fileId=spreadsheet_id, fields=\\\"webViewLink\\\")\\n                .execute()\\n            )\\n\\n            result = {\\n                \\\"spreadsheetId\\\": spreadsheet_id,\\n                \\\"title\\\": title,\\n                \\\"webViewLink\\\": file[\\\"webViewLink\\\"],\\n            }\\n\\n            return json.dumps(result, indent=2)\\n\\n        except Exception as e:\\n            print(f\\\"Error creating Google Sheet: {e}\\\")\\n            return f\\\"Error creating Google Sheet: {str(e)}\\\"\\n\\n    def read_google_sheet_data(\\n        self, spreadsheet_id: str, range_name: str = \\\"A1:Z100\\\"\\n    ) -> str:\\n        \\\"\\\"\\\"\\n        Read data from a Google Spreadsheet.\\n\\n        :param spreadsheet_id: The ID of the spreadsheet.\\n        :param range_name: The range to read (e.g., 'A1:Z100').\\n        :return: JSON string containing the spreadsheet data.\\n        \\\"\\\"\\\"\\n        try:\\n            creds = self._get_google_credentials()\\n            sheets_service = build(\\\"sheets\\\", \\\"v4\\\", credentials=creds)\\n\\n            result = (\\n                sheets_service.spreadsheets()\\n                .values()\\n                .get(spreadsheetId=spreadsheet_id, range=range_name)\\n                .execute()\\n            )\\n\\n            values = result.get(\\\"values\\\", [])\\n\\n            if not values:\\n                return \\\"No data found in the specified range.\\\"\\n\\n            return json.dumps(values, indent=2)\\n\\n        except Exception as e:\\n            print(f\\\"Error reading Google Sheet: {e}\\\")\\n            return f\\\"Error reading Google Sheet: {str(e)}\\\"\\n\\n    def search_google_drive(self, query: str, max_results: int = 10) -> str:\\n        \\\"\\\"\\\"\\n        Search for files in Google Drive.\\n\\n        :param query: Search query (file name, content, etc.).\\n        :param max_results: Maximum number of results to return.\\n        :return: JSON string containing search results.\\n        \\\"\\\"\\\"\\n        try:\\n            creds = self._get_google_credentials()\\n            service = build(\\\"drive\\\", \\\"v3\\\", credentials=creds)\\n\\n            # Search for files\\n            results = (\\n                service.files()\\n                .list(\\n                    q=f\\\"name contains '{query}' or fullText contains '{query}'\\\",\\n                    pageSize=max_results,\\n                    fields=\\\"nextPageToken, files(id, name, mimeType, modifiedTime, webViewLink)\\\",\\n                )\\n                .execute()\\n            )\\n\\n            items = results.get(\\\"files\\\", [])\\n\\n            if not items:\\n                return f\\\"No files found matching '{query}'.\\\"\\n\\n            files_data = []\\n            for item in items:\\n                files_data.append(\\n                    {\\n                        \\\"id\\\": item[\\\"id\\\"],\\n                        \\\"name\\\": item[\\\"name\\\"],\\n                        \\\"mimeType\\\": item.get(\\\"mimeType\\\", \\\"Unknown\\\"),\\n                        \\\"modifiedTime\\\": item.get(\\\"modifiedTime\\\", \\\"Unknown\\\"),\\n                        \\\"webViewLink\\\": item.get(\\\"webViewLink\\\", \\\"No link\\\"),\\n                    }\\n                )\\n\\n            return json.dumps(files_data, indent=2)\\n\\n        except Exception as e:\\n            print(f\\\"Error searching Google Drive: {e}\\\")\\n            return f\\\"Error searching Google Drive: {str(e)}\\\"\\n\\n    def get_google_doc_content(self, document_id: str) -> str:\\n        \\\"\\\"\\\"\\n        Get the content of a Google Document.\\n\\n        :param document_id: The ID of the document.\\n        :return: The text content of the document.\\n        \\\"\\\"\\\"\\n        try:\\n            creds = self._get_google_credentials()\\n            docs_service = build(\\\"docs\\\", \\\"v1\\\", credentials=creds)\\n\\n            doc = docs_service.documents().get(documentId=document_id).execute()\\n            content = doc.get(\\\"body\\\", {}).get(\\\"content\\\", [])\\n\\n            text_content = \\\"\\\"\\n            for element in content:\\n                if \\\"paragraph\\\" in element:\\n                    for text_element in element[\\\"paragraph\\\"].get(\\\"elements\\\", []):\\n                        if \\\"textRun\\\" in text_element:\\n                            text_content += text_element[\\\"textRun\\\"].get(\\\"content\\\", \\\"\\\")\\n\\n            return (\\n                text_content\\n                if text_content.strip()\\n                else \\\"Document appears to be empty.\\\"\\n            )\\n\\n        except Exception as e:\\n            print(f\\\"Error getting Google Doc content: {e}\\\")\\n            return f\\\"Error getting Google Doc content: {str(e)}\\\"\\n",
  "info": {
    "functions": [
      "authenticate_google_workspace",
      "list_google_drive_files",
      "create_google_doc",
      "create_google_sheet",
      "read_google_sheet_data",
      "search_google_drive",
      "get_google_doc_content"
    ],
    "oauth_scopes": [
      "https://www.googleapis.com/auth/drive",
      "https://www.googleapis.com/auth/drive.file",
      "https://www.googleapis.com/auth/documents",
      "https://www.googleapis.com/auth/spreadsheets",
      "https://www.googleapis.com/auth/presentations",
      "https://www.googleapis.com/auth/gmail.readonly",
      "https://www.googleapis.com/auth/gmail.compose",
      "https://www.googleapis.com/auth/calendar",
      "https://www.googleapis.com/auth/calendar.events"
    ]
  },
  "downloads": 0,
  "upvotes": 0,
  "downvotes": 0,
  "updatedAt": 1740426120,
  "createdAt": 1740426120,
  "user": {
    "id": "rthidden-001",
    "username": "rthidden",
    "name": "RT Hidden",
    "role": "developer",
    "verified": true
  }
}
